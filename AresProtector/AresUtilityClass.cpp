

#include "StdAfx.h"
//#include <sha.h>
//#include "altsha.h"
#include "..\tkcom\SHA1.h"
#include "aresutilityclass.h"
#include "AresSHA1.h"
//#include "AresConstants.h"

//CONSTANTS
unsigned char const_5919a8[]={0xD7,0xEF,0xE0,0x80,0x19,0xE1,0x4B,0x3C,
0xC3,0x47,0x10,0xE2,0xA6,0x1E,0x76,0x41,0xA2,0xC6,0xEB,0x32,0x25,0x11,0xDB,0xC7,
0x21,0x54,0x92,0xC5,0x5F,0x58,0xC1,0x2F,0x2C,0xD2,0xB1,0x0E,0x36,0x86,0x14,0xD3,
0x70,0x89,0x97,0xD9,0x0D,0xFC,0x7F,0x04,0x2D,0x5C,0x2B,0x4D,0x56,0x7B,0x9D,0xF2,
0xB8,0x71,0x0A,0xBF,0xB3,0x6C,0x9B,0xAD,0xC2,0xFB,0x27,0xAF,0x1D,0x65,0xE6,0xBE,
0x94,0x8B,0xC9,0xC0,0xF5,0xCC,0xBA,0xDD,0x6A,0x59,0x9E,0x74,0x0B,0x75,0x1C,0xD6,
0x0C,0xD5,0xFA,0x35,0x4C,0xB4,0xB5,0x88,0x8F,0x1F,0x6E,0x61,0x1A,0x28,0xE7,0x03,
0x40,0xEE,0xE5,0xF8,0x77,0x69,0x07,0x64,0x06,0x93,0x67,0x48,0xD0,0x3F,0x20,0xD1,
0x3D,0xA4,0x5B,0x23,0x05,0x85,0xB2,0x8D,0x5A,0xF1,0x1B,0xCD,0x44,0x33,0x9F,0x81,
0x37,0xFE,0x24,0x7E,0x8A,0xA8,0x62,0xCF,0x16,0x46,0xBD,0x7C,0x6B,0xDC,0xA5,0x91,
0xCE,0xCB,0x18,0x3E,0x99,0x60,0xDA,0xC4,0x79,0x9C,0xA9,0x8C,0x08,0xF9,0x96,0xE9,
0x30,0x4E,0xA7,0x3B,0x31,0x13,0xB6,0xEA,0x00,0xAC,0xA3,0x5E,0x34,0x6F,0x7D,0x39,
0xF4,0xEC,0x45,0xDE,0xAA,0xF6,0xF7,0x12,0x8E,0xD4,0x55,0x42,0x02,0xBC,0x3A,0xE4,
0x7A,0xA1,0xB9,0x01,0x15,0x26,0xBB,0xB7,0x78,0xCA,0x66,0xED,0xFF,0x68,0x43,0xE8,
0xDF,0xAE,0x17,0x09,0xE3,0xFD,0x5D,0x51,0x52,0xC8,0xF3,0xF0,0x50,0x2E,0x9A,0x29,
0x6D,0x22,0x87,0x53,0x2A,0x95,0x4F,0x57,0xAB,0x90,0x73,0xB0,0x49,0x0F,0x83,0xA0,
0x4A,0x63,0x38,0x72,0xD8,0x98,0x84,0x82,0xB0,0xCB,0xC4,0x67,0x2F,0x7C,0x70,0x6E,
0xA4,0xDB,0x3A,0x54,0x58,0x2C,0x23,0xF5,0x0A,0x15,0xBF,0xAD,0x26,0xCC,0x90,0xDA,
0x9A,0x04,0x64,0x82,0x56,0x44,0x0D,0x61,0x76,0x18,0xE9,0x7B,0x8A,0x14,0xCD,0x42,
0x65,0xE7,0xEC,0x32,0x20,0x30,0xE5,0x1F,0xA8,0xAC,0x13,0x85,0xB4,0x5B,0x24,0x88,
0xFA,0xB7,0xC6,0xAB,0x07,0x78,0x9B,0x75,0x68,0x0F,0xC3,0xD6,0x84,0xBA,0x91,0x09,
0x73,0xF4,0xF8,0x06,0x5C,0x33,0xA9,0xEE,0xE4,0xDF,0xE0,0xEB,0x19,0xC2,0x34,0xEF,
0x1D,0x51,0x80,0x7A,0x31,0xDE,0xB3,0x1C,0x9D,0x63,0x8E,0xF9,0x6F,0x45,0xD2,0x72,
0xD5,0x6D,0x50,0x94,0x3D,0xE8,0x62,0xB5,0x28,0x39,0xFB,0xF2,0x53,0x55,0x0E,0x6C,
0xD0,0xA0,0xC8,0x35,0x93,0xB6,0x8B,0x2E,0x03,0x87,0xFF,0xF6,0xFE,0x7D,0x25,0xEA,
0x5F,0x29,0x8C,0x49,0xA3,0x7F,0xC0,0x60,0xF1,0x97,0x1A,0x71,0x48,0xED,0xA6,0x2A,
0xFD,0x9C,0xE6,0x3E,0xA1,0x36,0x52,0x86,0xF7,0xC9,0x10,0xB2,0x79,0x96,0x0C,0xAA,
0x8D,0xA2,0xBC,0xF0,0xB1,0x3F,0xD9,0x43,0xF3,0x22,0x7E,0x3C,0x5D,0x5E,0xAE,0xCF,
0x38,0xCA,0x4E,0xCE,0xC5,0x92,0x47,0x3B,0x4B,0x1E,0x40,0x08,0x9F,0x1B,0x11,0x17,
0xE1,0x4A,0xD1,0x99,0x4D,0x83,0x98,0x8F,0x74,0x77,0x21,0x27,0xC1,0x59,0x57,0x00,
0xFC,0x2B,0x9E,0x16,0x95,0x4F,0xBB,0xD8,0x02,0x05,0x0B,0xDC,0xC7,0x6A,0x46,0x66,
0xD7,0xA7,0xAF,0x12,0xB9,0xD3,0x69,0x01,0xE3,0x81,0x37,0xE2,0xB8,0x4C,0xBD,0xBE,
0x6B,0xA5,0x5A,0x41,0x2D,0xDD,0x89,0xD4,0x73,0x48,0x1B,0x58,0x1F,0xCA,0x18,0x36,
0x8A,0x6D,0xD6,0xB7,0x7B,0x2C,0x64,0xDB,0x0B,0xAB,0x94,0x66,0x5D,0x12,0x60,0xA8,
0x53,0xEC,0x61,0x0C,0x99,0x55,0xF9,0x0F,0xE2,0xD4,0xC6,0x54,0x75,0xF5,0x4B,0xAE,
0xB5,0x59,0x79,0x19,0x70,0xC4,0x4D,0x33,0x22,0x8F,0xAC,0xE9,0x32,0xEF,0xF1,0xE1,
0x02,0xC9,0xCD,0x07,0xD5,0xA6,0x49,0x4E,0x69,0xA5,0x08,0x8C,0x6F,0x92,0xFB,0x68,
0xC7,0x0A,0xD3,0x03,0xD8,0xC0,0x41,0x95,0x9D,0xBD,0x74,0xFC,0x62,0x67,0xB0,0xA1,
0xD9,0x7A,0xBB,0x2F,0xA2,0xDE,0x28,0x4C,0x46,0xD0,0x52,0x00,0xDD,0x63,0x4A,0x3E,
0xE6,0xF8,0x25,0xFA,0x3B,0xC3,0x44,0xD2,0xC5,0x5B,0xEE,0x97,0xCB,0x21,0xAA,0x7C,
0x5F,0x3F,0x2E,0xEA,0xF6,0x77,0xF3,0x20,0x96,0xBF,0xB8,0x30,0xED,0x5E,0x56,0x5C,
0x16,0x1E,0x93,0x2A,0x80,0x43,0x37,0x34,0x15,0x72,0x65,0x84,0x78,0xB6,0x42,0x47,
0x9C,0x35,0x06,0x83,0x13,0x57,0xCC,0x87,0xB1,0xBA,0x26,0x6B,0x2B,0x6C,0xB9,0x81,
0x3D,0xA7,0x11,0x76,0xC2,0x01,0x45,0x85,0x1D,0x7F,0xF2,0xE0,0xE7,0x2D,0x5A,0xC1,
0xFF,0x98,0xB3,0x91,0x14,0x9E,0xF4,0x10,0x88,0xAD,0x90,0xCE,0x8E,0xDC,0xE4,0x6E,
0xD7,0xF7,0xA9,0x05,0x09,0xA3,0x39,0x3A,0xC8,0xCF,0x8D,0x1A,0x6A,0x86,0x9B,0xF0,
0x29,0x38,0x4F,0xA4,0x7E,0x31,0x0E,0x0D,0x3C,0xE8,0xB4,0xA0,0xAF,0xE5,0xFD,0x50,
0xEB,0x40,0x9F,0xDA,0x7D,0x82,0xDF,0xB2,0x27,0x71,0x04,0xBC,0xE3,0x8B,0x24,0x51,
0xD1,0x89,0x23,0xBE,0x9A,0x1C,0x17,0xFE,0x63,0xAD,0x38,0x4B,0xF2,0xCB,0x9A,0x3B,
0x42,0xCC,0x49,0x10,0x1B,0xDF,0xDE,0x1F,0xBF,0xAA,0x15,0x9C,0xBC,0x90,0x88,0xFE,
0x06,0x2B,0xD3,0x02,0xFD,0xB0,0x89,0x04,0x7F,0x75,0x30,0xFA,0xF6,0x6A,0xA2,0xF0,
0x5E,0xD8,0x8B,0xA4,0x0D,0xB5,0x7A,0x5B,0x83,0xDD,0x34,0x2F,0x8F,0x99,0x07,0x8E,
0xD9,0xCE,0xCF,0x6C,0xE0,0xA8,0x67,0x79,0xE9,0x4E,0x96,0x8D,0x6E,0xAE,0x60,0x97,
0x01,0x3E,0x66,0x26,0x5F,0x2E,0x3F,0xDA,0xE7,0xF7,0x62,0x18,0x23,0x1D,0x86,0x9D,
0x03,0x29,0xB6,0x71,0x87,0x14,0x85,0x78,0x16,0x1A,0x54,0x65,0x0E,0x92,0x13,0x55,
0x47,0x40,0xD4,0xA3,0xA5,0x09,0xC7,0x44,0x2C,0xF1,0x91,0x00,0x52,0x24,0xAB,0x7D,
0x94,0x2A,0x59,0x0C,0x77,0xEC,0xDC,0xB1,0x8C,0xA7,0xED,0x9B,0x93,0xAF,0xD5,0x9F,
0xC0,0xF9,0x08,0xF5,0x43,0xD2,0xC4,0x31,0xC2,0xBB,0x45,0x8A,0x12,0x4F,0x80,0x73,
0xB9,0x1C,0xFC,0xD6,0x98,0x50,0xBD,0xEA,0xE3,0x57,0x5C,0xCD,0xDB,0x41,0x3D,0xA9,
0x17,0xCA,0x76,0x11,0x32,0xC1,0x27,0xE4,0x56,0xA0,0xEF,0xBA,0xE2,0x28,0x95,0x0B,
0x82,0xA6,0xA1,0x5A,0xF3,0x51,0xFB,0x81,0x4D,0xB7,0xAC,0x6D,0x2D,0x70,0x22,0x48,
0xD0,0x39,0x05,0x74,0x9E,0x3A,0xC3,0xD1,0x61,0xF8,0x6F,0x4A,0x21,0x3C,0x0A,0xC8,
0x4C,0x58,0xEB,0x0F,0xC5,0x64,0x5D,0xEE,0xB3,0x37,0x20,0xF4,0xC6,0xE5,0x68,0xB4,
0xE1,0x33,0x7B,0xE8,0x19,0x84,0x72,0x35,0xD7,0x36,0xB2,0x7E,0xBE,0x25,0x7C,0xC9,
0x69,0x1E,0x6B,0x46,0x53,0xE6,0xFF,0xB8,0x00,0x00,0x08,0x08,0x6C,0xDC,0xDC,0x33,
0xDD,0x45,0xF0,0xAB,0x95,0x51,0x6B,0x29,0x4A,0x5F,0xF8,0x6C,0xFE,0x14,0x8B,0x79,
0x10,0x12,0x41,0xD7,0x4A,0x0F,0x15,0x4B,0xD2,0xEA,0x2E,0x5E,0x4F,0xC6,0xF2,0x53,
0x9A,0xB2,0x1A,0xD8,0xCD,0xB7,0x7F,0x4E,0xA1,0x29,0x59,0x54,0x4C,0x77,0x24,0x3F,
0x5E,0xD3,0x6E,0x47,0x54,0x7B,0x30,0x26,0xD3,0xDF,0x8B,0x49,0xD2,0xC5,0xF8,0xF9,
0x15,0x7E,0x4E,0xE3,0xC7,0xD3,0x32,0x05,0x1C,0x24,0xBC,0x24,0x34,0x80,0x8C,0x05,
0xC9,0x97,0x78,0x02,0x43,0xC6,0x90,0xA6,0x3D,0xC5,0x45,0xB5,0xB8,0x8E,0xBE,0x34,
0x5A,0xAE,0xC4,0x97,0x97,0xF4,0xE0,0xA4,0x94,0xFF,0x68,0x3E,0x18,0xAD,0xB2,0x4B,
0xFC,0x15,0xB6,0xC5,0xCA,0x7E,0xB5,0xE1,0x8C,0x82,0xC4,0x92,0x03,0xF4,0x50,0xAF,
0xB5,0x56,0xF2,0x01,0x91,0xB4,0x2A,0xFD,0x27,0xC6,0xE3,0xBF,0x9C,0x32,0xC5,0x24,
0xE0,0xE9,0xC0,0xC8,0xDA,0x96,0x5C,0xDD,0x79,0xB0,0xAF,0x49,0xF8,0x17,0x00,0xA1,
0xAF,0x47,0x8E,0xE0,0x46,0x29,0xEF,0x45,0x2E,0x8B,0xF5,0xF5,0xA2,0x2C,0x35,0x28,
0xA3,0x44,0x6D,0x2D,0xA8,0x93,0x86,0x7F,0x01,0x49,0xEB,0x27,0x18,0x9C,0x5B,0xBD,
0x13,0xBF,0x91,0x14,0x8A,0x13,0x4D,0x0F,0x45,0x1B,0xA6,0xCB,0x4D,0xCE,0xB0,0x61,
0xAD,0x9C,0xD3,0x6F,0xA6,0xBD,0x71,0x7E,0x5E,0x57,0xA1,0xD1,0x28,0xD1,0x32,0x24,
0xEF,0x17,0x31,0x11,0x6F,0x0F,0xA4,0x31,0x46,0xAC,0x3B,0x3A,0x02,0x92,0x25,0x41,
0xAB,0x5D,0x4A,0xD6,0x87,0x50,0x9B,0x50,0x0A,0xA8,0x37,0xB1,0x29,0xE7,0x92,0x51,
0x8A,0x7A,0xE5,0x4B,0x48,0xC4,0x92,0xBD,0x4D,0x8D,0x3C,0xB9,0x61,0x69,0xC3,0x8A,
0x87,0x98,0x69,0xE1,0x3E,0xAB,0xC5,0x1C,0xC2,0x78,0x55,0x67,0x60,0x1D,0xCB,0x0D,
0x71,0x8C,0x64,0xAC,0xAA,0x14,0xF6,0xEB,0xB4,0xD6,0x70,0xAE,0x4F,0xED,0xFA,0x46,
0x6C,0xB3,0x06,0xBC,0xFF,0x7F,0xEC,0xA9,0x81,0x28,0xE1,0x3A,0x4E,0xF2,0x6B,0x5D,
0x6F,0x20,0xA5,0xFC,0x66,0x4E,0xF1,0x0D,0x18,0x1A,0xDE,0xDD,0xEF,0x8D,0x78,0xB2,
0xC6,0x19,0x39,0xAB,0x3C,0x04,0x51,0x4F,0x7F,0xE7,0x03,0x89,0xB8,0x53,0x42,0x71,
0x8F,0xE6,0xE0,0x58,0x90,0x5A,0xE0,0x7C,0x51,0x12,0xCD,0xD9,0xA2,0xC2,0x2D,0x2E,
0x3E,0xEC,0x59,0x7E,0xA8,0x20,0x71,0xE4,0x3A,0x67,0x21,0x35,0x9E,0xCE,0x5F,0x96,
0x1C,0x1C,0x8A,0x9F,0x7A,0xED,0x62,0x8A,0x7C,0x53,0xC4,0x72,0x0E,0x3A,0x46,0x2F,
0xC2,0xB0,0xFC,0xFE,0x36,0xA1,0x0D,0xB1,0x6C,0x8A,0xE2,0x18,0x47,0xBF,0x11,0x26,
0xA1,0x3B,0x5C,0xE1,0xB9,0xB6,0x57,0x70,0xF3,0xFA,0x8A,0x27,0x14,0x0A,0x34,0x2F,
0x7B,0x02,0xFA,0x60,0x19,0x65,0x23,0x5D,0x11,0x15,0x2E,0x74,0x33,0x81,0xE6,0x75,
0xE8,0xAC,0x4C,0xD1,0x1E,0x91,0xDD,0x40,0x53,0x5F,0x25,0x95,0xD7,0xDF,0xA4,0x9B,
0xD4,0x41,0x6A,0xB2,0xC5,0x8E,0xF2,0xE0,0x62,0x5C,0x2B,0x5D,0x26,0x9F,0xAE,0xC7,
0xFD,0x74,0x91,0x34,0xBD,0xB2,0x53,0xD6,0x75,0xC0,0xDD,0xE6,0xBB,0x2F,0x88,0xC6,
0x78,0x44,0xA2,0x4B,0xEB,0xB3,0xF9,0x74,0xA6,0xCB,0x3E,0x1C,0xAE,0x60,0x4F,0x38,
0x00,0x68,0xB7,0xB1,0x6F,0x94,0xCB,0xCD,0xB6,0xFC,0x74,0xE2,0xB8,0xDB,0xF5,0x50,
0xFC,0x95,0xDB,0x3E,0xBA,0x69,0xB5,0x67,0x11,0x6F,0xA4,0xA3,0x3D,0xD4,0xE6,0x1D,
0xE5,0x1D,0xE6,0x83,0xDD,0xB5,0x7C,0x00,0xED,0xCA,0x5E,0x70,0x80,0x82,0xF2,0x33,
0x44,0x51,0xFF,0x27,0x1C,0x0A,0xF7,0xF1,0x04,0x63,0xC1,0xBD,0xA9,0x65,0x59,0x1A,
0xE4,0x0D,0xA3,0x9F,0x61,0x4A,0x32,0xC3,0x13,0x3C,0x03,0x8B,0x40,0xFF,0x53,0xF4,
0x55,0x0D,0x20,0xBA,0xBA,0x70,0xEF,0xF9,0x5D,0x24,0xED,0xD6,0xB7,0x1E,0x8A,0xFA,
0x6B,0x44,0x1A,0x7F,0xD5,0xE0,0x22,0xBC,0x27,0xDB,0x5E,0x65,0xDF,0xBC,0x9D,0xC4,
0xBD,0x52,0x07,0x5C,0x89,0x4B,0x73,0x41,0x3B,0x48,0xC6,0xD4,0x6F,0x67,0x9D,0x62,
0x29,0x02,0xB5,0xA1,0x4E,0x22,0xBE,0x14,0x68,0xC3,0xAA,0x03,0x83,0x3C,0x91,0x46,
0x4D,0xD6,0xC1,0x51,0xC2,0x9A,0x94,0x25,0xFE,0x6B,0x24,0xC6,0x18,0x76,0xF4,0xFD,
0x0D,0xAC,0x1F,0x3C,0x24,0x42,0xB9,0xA9,0x55,0x90,0x62,0xEB,0x93,0x85,0x34,0xBB,
0x12,0x69,0x97,0x6C,0xDB,0x20,0xA6,0xCE,0x45,0x25,0x25,0x93,0x39,0xBF,0x33,0xAF,
0x47,0xBB,0x43,0xE8,0xEE,0x6D,0x07,0x3B,0xAD,0x4D,0x42,0xD3,0xB6,0x95,0xC7,0x32,
0x5C,0xE8,0x14,0xBB,0x8B,0xD2,0x3C,0x60,0xEE,0xF1,0x22,0xAD,0x99,0x65,0x3C,0xC0,
0x45,0xAD,0x4D,0x55,0x82,0x3D,0xDA,0x9B,0x6F,0x67,0x43,0x53,0xD4,0xD0,0xCF,0xBC,
0xBA,0x2D,0x05,0x39,0xC9,0x46,0x28,0x29,0x18,0x28,0xB6,0xBE,0x3F,0xAA,0x32,0x12,
0xB7,0xF3,0xA7,0xF7,0xF8,0x22,0xA4,0xE2,0xD9,0x99,0xA2,0x94,0x14,0x71,0x0D,0x98,
0xFB,0xFE,0x74,0x7F,0xCC,0x26,0x7E,0xD3,0x24,0xE6,0xBE,0x5B,0x71,0x5C,0x79,0x4D,
0x8A,0xE4,0xFD,0xB8,0xA6,0xDA,0x1A,0x99,0x6C,0xE1,0xD8,0x01,0xDB,0xF6,0x85,0x62,
0x2D,0xFE,0xAB,0x74,0x0B,0x9E,0x91,0x94,0xAE,0x02,0x52,0xB1,0xB8,0x49,0xB4,0x11,
0xEF,0xA9,0x39,0xA8,0x24,0xDB,0x2F,0xEC,0xE6,0x6A,0xA2,0xF6,0xD2,0x98,0x7B,0x49,
0xA0,0x99,0x36,0xFC,0x3E,0xCA,0xF4,0x5C,0x97,0xFC,0xD0,0x35,0xD9,0xAD,0xC5,0x25,
0x54,0x32,0x86,0xA9,0x49,0xC5,0x14,0xDC,0x46,0x83,0xFA,0x6F,0xE0,0xB3,0x70,0x39,
0xE3,0xFB,0xE0,0xA6,0x5B,0x2B,0x79,0x08,0xFE,0xEA,0xD1,0x58,0xDD,0xA2,0xCF,0xA7,
0x68,0x20,0x50,0x26,0x2B,0xD4,0x3E,0x6C,0xCB,0x87,0x1A,0xBC,0x2B,0x3B,0x28,0x0E,
0xC4,0xFB,0xB4,0x62,0x98,0x13,0x34,0x8E,0x41,0x6D,0x30,0x33,0x09,0x91,0x36,0x3D,
0x1B,0xBB,0x40,0xBD,0x22,0x4D,0x5F,0xD3,0xF4,0xD5,0x7F,0x2A,0x1A,0x28,0xA6,0xC2,
0x54,0x0C,0xFD,0x2A,0x6E,0x17,0x77,0x30,0x00,0x9B,0x09,0x37,0xE5,0x9E,0x9C,0x42,
0x9B,0xDD,0x44,0xF2,0xC5,0xEF,0x6A,0xAB,0x81,0xBB,0xE3,0xBB,0x55,0xEA,0x2D,0xA1,
0xE0,0x2C,0x45,0xB8,0x94,0x7D,0xD6,0xAC,0x19,0xF4,0xB7,0xDF,0x38,0x21,0xE5,0xFB,
0x57,0xE7,0x84,0xDE,0xEA,0x65,0x92,0x21,0x6F,0x66,0x41,0xD2,0xC2,0xD7,0x40,0x73,
0xF8,0xD8,0x58,0x30,0xFF,0xAE,0x24,0x6C,0x7F,0x77,0xEF,0x99,0xB7,0x65,0x9E,0x99,
0x6E,0x01,0x8B,0xA2,0x3A,0x41,0x42,0x4A,0xC3,0x3F,0xA8,0xB8,0xC6,0x89,0xA9,0x7F,
0xEA,0xEB,0xCD,0x95,0x30,0x23,0xF1,0xC1,0x21,0xD7,0xA7,0xDB,0x08,0xAF,0xDB,0x56,
0xD9,0xB3,0xD4,0x72,0x95,0x96,0xB3,0x63,0x4D,0x6F,0xF0,0xBA,0x0F,0x2B,0x87,0x7E,
0x62,0xB7,0xDE,0x97,0x1D,0x18,0x86,0xDA,0xBF,0x88,0x59,0xA8,0x90,0xA4,0xB6,0x7B,
0x2E,0xE1,0xBC,0x31,0x5E,0x7D,0xDB,0x1D,0x33,0xF2,0x10,0x8D,0xE3,0x06,0xA4,0xBA,
0xEB,0x6F,0x54,0x21,0x54,0x70,0x19,0xDB,0x28,0xD8,0x12,0x37,0x84,0x05,0x43,0x20,
0xCB,0xCD,0x1F,0x31,0xDC,0x7A,0x1B,0xAF,0x63,0xE4,0xB3,0xF6,0x96,0x2F,0xB5,0x6B,
0x05,0x78,0xAB,0x9A,0x3B,0xA2,0xAE,0x2F,0x6B,0x6D,0x1B,0x8C,0x5D,0x93,0xD4,0x67,
0x50,0xF6,0x18,0xDC,0x96,0x92,0x16,0xC5,0x0C,0xB6,0xC5,0x64,0xC2,0xF1,0xAC,0xEC,
0x6D,0xE2,0x9C,0xDD,0x79,0x5A,0x88,0x53,0xD6,0x3C,0x00,0x29,0xD1,0x81,0xFE,0xB0,
0x9C,0xFF,0x01,0x67,0x53,0xB6,0xB0,0xB4,0x9E,0x1B,0x70,0x99,0x3C,0x44,0xBD,0xEB,
0x23,0x62,0x24,0xE5,0xF6,0xEB,0x2A,0x01,0xFA,0x76,0x8C,0xBC,0xD7,0xE6,0x92,0xC5,
0xCD,0xA6,0x76,0x7F,0x1A,0x36,0x0B,0xAA,0xC6,0xFD,0x1F,0x5C,0x1C,0x38,0x59,0x9A,
0x67,0x3A,0x7D,0x7D,0xD9,0xBF,0x57,0x62,0xA4,0x78,0xC9,0xD2,0xA6,0x2A,0xA4,0x0A,
0x42,0xB1,0x51,0xFC,0x31,0x30,0x8B,0xD8,0x75,0x69,0x7E,0x29,0xB8,0x68,0x35,0xDD,
0xB6,0x2E,0x22,0xF4,0x87,0xC5,0x12,0x40,0xE3,0xBA,0x04,0x85,0xB6,0x77,0x86,0xB0,
0x9C,0xDC,0xAE,0x8D,0x21,0x01,0xD2,0xAA,0xDA,0x7F,0x77,0xE3,0xA8,0x6B,0x43,0x7C,
0xD1,0x72,0xCD,0xC7,0xA9,0xE2,0x9E,0x32,0x08,0xC3,0xC6,0x29,0xBC,0x2A,0xCC,0xE2,
0xB7,0xCE,0xE8,0x6C,0xAF,0xB3,0xC3,0xF2,0x62,0x66,0x35,0x81,0xC3,0x40,0xB6,0x52,
0xB5,0x9A,0x7B,0x58,0x26,0x63,0x7E,0xD1,0xA0,0x12,0xDC,0x04,0xB1,0x42,0x49,0xF8,
0xB4,0x05,0x99,0x0C,0xE4,0x70,0x82,0x19,0xBE,0x36,0x24,0xBF,0x1F,0xC2,0x01,0x7F,
0xA2,0x8A,0x66,0x97,0x24,0x69,0x75,0xE3,0x7B,0x17,0x4F,0xF7,0xCB,0xD0,0x10,0xA3,
0xF2,0xC7,0x9D,0xC8,0x05,0xF0,0x72,0x4F,0xDC,0xEE,0xEE,0xCE,0x14,0x14,0xD8,0x92,
0x18,0x67,0x09,0xB7,0x0A,0x5D,0x86,0x8E,0xA8,0x1B,0x6A,0x2F,0x81,0x68,0x73,0x20,
0x0F,0x14,0x0E,0x96,0x9A,0xE6,0x35,0xBC,0xEB,0x60,0x7F,0x07,0x39,0x15,0x2D,0xC3,
0xD4,0x84,0x20,0xDB,0x7F,0x5D,0xF4,0x87,0x76,0x35,0xBA,0xD8,0x8A,0x8F,0x06,0x69,
0xEA,0x90,0x48,0xB3,0x6A,0x78,0xAE,0xAE,0x5B,0x23,0x00,0x95,0x64,0xCE,0x33,0x18,
0xD7,0x58,0xA4,0xC8,0x6B,0xAF,0x41,0x44,0x73,0x37,0x09,0xCC,0xDD,0x2D,0x9B,0x60,
0xA4,0x7D,0xE5,0x57,0x7B,0xA7,0x01,0xCD,0xDA,0x80,0xDE,0x28,0xAD,0xE2,0x5D,0x9D,
0x5E,0x68,0xD1,0x95,0xF5,0x2D,0x32,0x27,0x6F,0xA0,0x61,0x3F,0xB1,0xFD,0x47,0x06,
0x99,0xA1,0xC1,0x64,0x16,0xC4,0x90,0x44,0x57,0x68,0xC4,0xA9,0x6A,0xFF,0x5E,0x91,
0xEA,0x38,0x23,0x5A,0x83,0xBA,0xC9,0xB3};

unsigned char *const_591aa8=const_5919a8+(0x591aa8-0x5919a8);
unsigned char *const_591ba8=const_5919a8+(0x591ba8-0x5919a8);
unsigned char *const_591ca8=const_5919a8+(0x591ca8-0x5919a8);
unsigned char *const_591da8=const_5919a8+(0x591da8-0x5919a8);

unsigned char const_591da0[]={0x00,0x00,0x08,0x08,0x6C,0xDC,0xDC,0x33,
0xDD,0x45,0xF0,0xAB,0x95,0x51,0x6B,0x29,0x4A,0x5F,0xF8,0x6C,0xFE,0x14,0x8B,0x79,
0x10,0x12,0x41,0xD7,0x4A,0x0F,0x15,0x4B,0xD2,0xEA,0x2E,0x5E,0x4F,0xC6,0xF2,0x53,
0x9A,0xB2,0x1A,0xD8,0xCD,0xB7,0x7F,0x4E,0xA1,0x29,0x59,0x54,0x4C,0x77,0x24,0x3F,
0x5E,0xD3,0x6E,0x47,0x54,0x7B,0x30,0x26,0xD3,0xDF,0x8B,0x49,0xD2,0xC5,0xF8,0xF9,
0x15,0x7E,0x4E,0xE3,0xC7,0xD3,0x32,0x05,0x1C,0x24,0xBC,0x24,0x34,0x80,0x8C,0x05,
0xC9,0x97,0x78,0x02,0x43,0xC6,0x90,0xA6,0x3D,0xC5,0x45,0xB5,0xB8,0x8E,0xBE,0x34,
0x5A,0xAE,0xC4,0x97,0x97,0xF4,0xE0,0xA4,0x94,0xFF,0x68,0x3E,0x18,0xAD,0xB2,0x4B,
0xFC,0x15,0xB6,0xC5,0xCA,0x7E,0xB5,0xE1,0x8C,0x82,0xC4,0x92,0x03,0xF4,0x50,0xAF,
0xB5,0x56,0xF2,0x01,0x91,0xB4,0x2A,0xFD,0x27,0xC6,0xE3,0xBF,0x9C,0x32,0xC5,0x24,
0xE0,0xE9,0xC0,0xC8,0xDA,0x96,0x5C,0xDD,0x79,0xB0,0xAF,0x49,0xF8,0x17,0x00,0xA1,
0xAF,0x47,0x8E,0xE0,0x46,0x29,0xEF,0x45,0x2E,0x8B,0xF5,0xF5,0xA2,0x2C,0x35,0x28,
0xA3,0x44,0x6D,0x2D,0xA8,0x93,0x86,0x7F,0x01,0x49,0xEB,0x27,0x18,0x9C,0x5B,0xBD,
0x13,0xBF,0x91,0x14,0x8A,0x13,0x4D,0x0F,0x45,0x1B,0xA6,0xCB,0x4D,0xCE,0xB0,0x61,
0xAD,0x9C,0xD3,0x6F,0xA6,0xBD,0x71,0x7E,0x5E,0x57,0xA1,0xD1,0x28,0xD1,0x32,0x24,
0xEF,0x17,0x31,0x11,0x6F,0x0F,0xA4,0x31,0x46,0xAC,0x3B,0x3A,0x02,0x92,0x25,0x41,
0xAB,0x5D,0x4A,0xD6,0x87,0x50,0x9B,0x50,0x0A,0xA8,0x37,0xB1,0x29,0xE7,0x92,0x51,
0x8A,0x7A,0xE5,0x4B,0x48,0xC4,0x92,0xBD,0x4D,0x8D,0x3C,0xB9,0x61,0x69,0xC3,0x8A,
0x87,0x98,0x69,0xE1,0x3E,0xAB,0xC5,0x1C,0xC2,0x78,0x55,0x67,0x60,0x1D,0xCB,0x0D,
0x71,0x8C,0x64,0xAC,0xAA,0x14,0xF6,0xEB,0xB4,0xD6,0x70,0xAE,0x4F,0xED,0xFA,0x46,
0x6C,0xB3,0x06,0xBC,0xFF,0x7F,0xEC,0xA9,0x81,0x28,0xE1,0x3A,0x4E,0xF2,0x6B,0x5D,
0x6F,0x20,0xA5,0xFC,0x66,0x4E,0xF1,0x0D,0x18,0x1A,0xDE,0xDD,0xEF,0x8D,0x78,0xB2,
0xC6,0x19,0x39,0xAB,0x3C,0x04,0x51,0x4F,0x7F,0xE7,0x03,0x89,0xB8,0x53,0x42,0x71,
0x8F,0xE6,0xE0,0x58,0x90,0x5A,0xE0,0x7C,0x51,0x12,0xCD,0xD9,0xA2,0xC2,0x2D,0x2E,
0x3E,0xEC,0x59,0x7E,0xA8,0x20,0x71,0xE4,0x3A,0x67,0x21,0x35,0x9E,0xCE,0x5F,0x96,
0x1C,0x1C,0x8A,0x9F,0x7A,0xED,0x62,0x8A,0x7C,0x53,0xC4,0x72,0x0E,0x3A,0x46,0x2F,
0xC2,0xB0,0xFC,0xFE,0x36,0xA1,0x0D,0xB1,0x6C,0x8A,0xE2,0x18,0x47,0xBF,0x11,0x26,
0xA1,0x3B,0x5C,0xE1,0xB9,0xB6,0x57,0x70,0xF3,0xFA,0x8A,0x27,0x14,0x0A,0x34,0x2F,
0x7B,0x02,0xFA,0x60,0x19,0x65,0x23,0x5D,0x11,0x15,0x2E,0x74,0x33,0x81,0xE6,0x75,
0xE8,0xAC,0x4C,0xD1,0x1E,0x91,0xDD,0x40,0x53,0x5F,0x25,0x95,0xD7,0xDF,0xA4,0x9B,
0xD4,0x41,0x6A,0xB2,0xC5,0x8E,0xF2,0xE0,0x62,0x5C,0x2B,0x5D,0x26,0x9F,0xAE,0xC7,
0xFD,0x74,0x91,0x34,0xBD,0xB2,0x53,0xD6,0x75,0xC0,0xDD,0xE6,0xBB,0x2F,0x88,0xC6,
0x78,0x44,0xA2,0x4B,0xEB,0xB3,0xF9,0x74,0xA6,0xCB,0x3E,0x1C,0xAE,0x60,0x4F,0x38,
0x00,0x68,0xB7,0xB1,0x6F,0x94,0xCB,0xCD,0xB6,0xFC,0x74,0xE2,0xB8,0xDB,0xF5,0x50,
0xFC,0x95,0xDB,0x3E,0xBA,0x69,0xB5,0x67,0x11,0x6F,0xA4,0xA3,0x3D,0xD4,0xE6,0x1D,
0xE5,0x1D,0xE6,0x83,0xDD,0xB5,0x7C,0x00,0xED,0xCA,0x5E,0x70,0x80,0x82,0xF2,0x33,
0x44,0x51,0xFF,0x27,0x1C,0x0A,0xF7,0xF1,0x04,0x63,0xC1,0xBD,0xA9,0x65,0x59,0x1A,
0xE4,0x0D,0xA3,0x9F,0x61,0x4A,0x32,0xC3,0x13,0x3C,0x03,0x8B,0x40,0xFF,0x53,0xF4,
0x55,0x0D,0x20,0xBA,0xBA,0x70,0xEF,0xF9,0x5D,0x24,0xED,0xD6,0xB7,0x1E,0x8A,0xFA,
0x6B,0x44,0x1A,0x7F,0xD5,0xE0,0x22,0xBC,0x27,0xDB,0x5E,0x65,0xDF,0xBC,0x9D,0xC4,
0xBD,0x52,0x07,0x5C,0x89,0x4B,0x73,0x41,0x3B,0x48,0xC6,0xD4,0x6F,0x67,0x9D,0x62,
0x29,0x02,0xB5,0xA1,0x4E,0x22,0xBE,0x14,0x68,0xC3,0xAA,0x03,0x83,0x3C,0x91,0x46,
0x4D,0xD6,0xC1,0x51,0xC2,0x9A,0x94,0x25,0xFE,0x6B,0x24,0xC6,0x18,0x76,0xF4,0xFD,
0x0D,0xAC,0x1F,0x3C,0x24,0x42,0xB9,0xA9,0x55,0x90,0x62,0xEB,0x93,0x85,0x34,0xBB,
0x12,0x69,0x97,0x6C,0xDB,0x20,0xA6,0xCE,0x45,0x25,0x25,0x93,0x39,0xBF,0x33,0xAF,
0x47,0xBB,0x43,0xE8,0xEE,0x6D,0x07,0x3B,0xAD,0x4D,0x42,0xD3,0xB6,0x95,0xC7,0x32,
0x5C,0xE8,0x14,0xBB,0x8B,0xD2,0x3C,0x60,0xEE,0xF1,0x22,0xAD,0x99,0x65,0x3C,0xC0,
0x45,0xAD,0x4D,0x55,0x82,0x3D,0xDA,0x9B,0x6F,0x67,0x43,0x53,0xD4,0xD0,0xCF,0xBC,
0xBA,0x2D,0x05,0x39,0xC9,0x46,0x28,0x29,0x18,0x28,0xB6,0xBE,0x3F,0xAA,0x32,0x12,
0xB7,0xF3,0xA7,0xF7,0xF8,0x22,0xA4,0xE2,0xD9,0x99,0xA2,0x94,0x14,0x71,0x0D,0x98,
0xFB,0xFE,0x74,0x7F,0xCC,0x26,0x7E,0xD3,0x24,0xE6,0xBE,0x5B,0x71,0x5C,0x79,0x4D,
0x8A,0xE4,0xFD,0xB8,0xA6,0xDA,0x1A,0x99,0x6C,0xE1,0xD8,0x01,0xDB,0xF6,0x85,0x62,
0x2D,0xFE,0xAB,0x74,0x0B,0x9E,0x91,0x94,0xAE,0x02,0x52,0xB1,0xB8,0x49,0xB4,0x11,
0xEF,0xA9,0x39,0xA8,0x24,0xDB,0x2F,0xEC,0xE6,0x6A,0xA2,0xF6,0xD2,0x98,0x7B,0x49,
0xA0,0x99,0x36,0xFC,0x3E,0xCA,0xF4,0x5C,0x97,0xFC,0xD0,0x35,0xD9,0xAD,0xC5,0x25,
0x54,0x32,0x86,0xA9,0x49,0xC5,0x14,0xDC,0x46,0x83,0xFA,0x6F,0xE0,0xB3,0x70,0x39,
0xE3,0xFB,0xE0,0xA6,0x5B,0x2B,0x79,0x08,0xFE,0xEA,0xD1,0x58,0xDD,0xA2,0xCF,0xA7,
0x68,0x20,0x50,0x26,0x2B,0xD4,0x3E,0x6C,0xCB,0x87,0x1A,0xBC,0x2B,0x3B,0x28,0x0E,
0xC4,0xFB,0xB4,0x62,0x98,0x13,0x34,0x8E,0x41,0x6D,0x30,0x33,0x09,0x91,0x36,0x3D,
0x1B,0xBB,0x40,0xBD,0x22,0x4D,0x5F,0xD3,0xF4,0xD5,0x7F,0x2A,0x1A,0x28,0xA6,0xC2,
0x54,0x0C,0xFD,0x2A,0x6E,0x17,0x77,0x30,0x00,0x9B,0x09,0x37,0xE5,0x9E,0x9C,0x42,
0x9B,0xDD,0x44,0xF2,0xC5,0xEF,0x6A,0xAB,0x81,0xBB,0xE3,0xBB,0x55,0xEA,0x2D,0xA1,
0xE0,0x2C,0x45,0xB8,0x94,0x7D,0xD6,0xAC,0x19,0xF4,0xB7,0xDF,0x38,0x21,0xE5,0xFB,
0x57,0xE7,0x84,0xDE,0xEA,0x65,0x92,0x21,0x6F,0x66,0x41,0xD2,0xC2,0xD7,0x40,0x73,
0xF8,0xD8,0x58,0x30,0xFF,0xAE,0x24,0x6C,0x7F,0x77,0xEF,0x99,0xB7,0x65,0x9E,0x99,
0x6E,0x01,0x8B,0xA2,0x3A,0x41,0x42,0x4A,0xC3,0x3F,0xA8,0xB8,0xC6,0x89,0xA9,0x7F,
0xEA,0xEB,0xCD,0x95,0x30,0x23,0xF1,0xC1,0x21,0xD7,0xA7,0xDB,0x08,0xAF,0xDB,0x56,
0xD9,0xB3,0xD4,0x72,0x95,0x96,0xB3,0x63,0x4D,0x6F,0xF0,0xBA,0x0F,0x2B,0x87,0x7E,
0x62,0xB7,0xDE,0x97,0x1D,0x18,0x86,0xDA,0xBF,0x88,0x59,0xA8,0x90,0xA4,0xB6,0x7B,
0x2E,0xE1,0xBC,0x31,0x5E,0x7D,0xDB,0x1D,0x33,0xF2,0x10,0x8D,0xE3,0x06,0xA4,0xBA,
0xEB,0x6F,0x54,0x21,0x54,0x70,0x19,0xDB,0x28,0xD8,0x12,0x37,0x84,0x05,0x43,0x20,
0xCB,0xCD,0x1F,0x31,0xDC,0x7A,0x1B,0xAF,0x63,0xE4,0xB3,0xF6,0x96,0x2F,0xB5,0x6B,
0x05,0x78,0xAB,0x9A,0x3B,0xA2,0xAE,0x2F,0x6B,0x6D,0x1B,0x8C,0x5D,0x93,0xD4,0x67,
0x50,0xF6,0x18,0xDC,0x96,0x92,0x16,0xC5,0x0C,0xB6,0xC5,0x64,0xC2,0xF1,0xAC,0xEC,
0x6D,0xE2,0x9C,0xDD,0x79,0x5A,0x88,0x53,0xD6,0x3C,0x00,0x29,0xD1,0x81,0xFE,0xB0,
0x9C,0xFF,0x01,0x67,0x53,0xB6,0xB0,0xB4,0x9E,0x1B,0x70,0x99,0x3C,0x44,0xBD,0xEB,
0x23,0x62,0x24,0xE5,0xF6,0xEB,0x2A,0x01,0xFA,0x76,0x8C,0xBC,0xD7,0xE6,0x92,0xC5,
0xCD,0xA6,0x76,0x7F,0x1A,0x36,0x0B,0xAA,0xC6,0xFD,0x1F,0x5C,0x1C,0x38,0x59,0x9A,
0x67,0x3A,0x7D,0x7D,0xD9,0xBF,0x57,0x62,0xA4,0x78,0xC9,0xD2,0xA6,0x2A,0xA4,0x0A,
0x42,0xB1,0x51,0xFC,0x31,0x30,0x8B,0xD8,0x75,0x69,0x7E,0x29,0xB8,0x68,0x35,0xDD,
0xB6,0x2E,0x22,0xF4,0x87,0xC5,0x12,0x40,0xE3,0xBA,0x04,0x85,0xB6,0x77,0x86,0xB0,
0x9C,0xDC,0xAE,0x8D,0x21,0x01,0xD2,0xAA,0xDA,0x7F,0x77,0xE3,0xA8,0x6B,0x43,0x7C,
0xD1,0x72,0xCD,0xC7,0xA9,0xE2,0x9E,0x32,0x08,0xC3,0xC6,0x29,0xBC,0x2A,0xCC,0xE2,
0xB7,0xCE,0xE8,0x6C,0xAF,0xB3,0xC3,0xF2,0x62,0x66,0x35,0x81,0xC3,0x40,0xB6,0x52,
0xB5,0x9A,0x7B,0x58,0x26,0x63,0x7E,0xD1,0xA0,0x12,0xDC,0x04,0xB1,0x42,0x49,0xF8,
0xB4,0x05,0x99,0x0C,0xE4,0x70,0x82,0x19,0xBE,0x36,0x24,0xBF,0x1F,0xC2,0x01,0x7F,
0xA2,0x8A,0x66,0x97,0x24,0x69,0x75,0xE3,0x7B,0x17,0x4F,0xF7,0xCB,0xD0,0x10,0xA3,
0xF2,0xC7,0x9D,0xC8,0x05,0xF0,0x72,0x4F,0xDC,0xEE,0xEE,0xCE,0x14,0x14,0xD8,0x92,
0x18,0x67,0x09,0xB7,0x0A,0x5D,0x86,0x8E,0xA8,0x1B,0x6A,0x2F,0x81,0x68,0x73,0x20,
0x0F,0x14,0x0E,0x96,0x9A,0xE6,0x35,0xBC,0xEB,0x60,0x7F,0x07,0x39,0x15,0x2D,0xC3,
0xD4,0x84,0x20,0xDB,0x7F,0x5D,0xF4,0x87,0x76,0x35,0xBA,0xD8,0x8A,0x8F,0x06,0x69,
0xEA,0x90,0x48,0xB3,0x6A,0x78,0xAE,0xAE,0x5B,0x23,0x00,0x95,0x64,0xCE,0x33,0x18,
0xD7,0x58,0xA4,0xC8,0x6B,0xAF,0x41,0x44,0x73,0x37,0x09,0xCC,0xDD,0x2D,0x9B,0x60,
0xA4,0x7D,0xE5,0x57,0x7B,0xA7,0x01,0xCD,0xDA,0x80,0xDE,0x28,0xAD,0xE2,0x5D,0x9D,
0x5E,0x68,0xD1,0x95,0xF5,0x2D,0x32,0x27,0x6F,0xA0,0x61,0x3F,0xB1,0xFD,0x47,0x06,
0x99,0xA1,0xC1,0x64,0x16,0xC4,0x90,0x44,0x57,0x68,0xC4,0xA9,0x6A,0xFF,0x5E,0x91,
0xEA,0x38,0x23,0x5A,0x83,0xBA,0xC9,0xB3};


unsigned char AresUtilityClass::sm_data1[512];
unsigned char AresUtilityClass::sm_data2[512];
unsigned char AresUtilityClass::sm_data3[512];
bool AresUtilityClass::smb_inited_data=false;

void AresUtilityClass::InitData(){
	smb_inited_data=true;
	TRACE("AresUtilityClass::InitData()\n");
	// 0x600 of constant data
	unsigned char data[]={0x00,0x00,0x08,0x08,0x6C,0xDC,0xDC,0x33,
	0xDD,0x45,0xF0,0xAB,0x95,0x51,0x6B,0x29,0x4A,0x5F,0xF8,0x6C,0xFE,0x14,0x8B,0x79,
	0x10,0x12,0x41,0xD7,0x4A,0x0F,0x15,0x4B,0xD2,0xEA,0x2E,0x5E,0x4F,0xC6,0xF2,0x53,
	0x9A,0xB2,0x1A,0xD8,0xCD,0xB7,0x7F,0x4E,0xA1,0x29,0x59,0x54,0x4C,0x77,0x24,0x3F,
	0x5E,0xD3,0x6E,0x47,0x54,0x7B,0x30,0x26,0xD3,0xDF,0x8B,0x49,0xD2,0xC5,0xF8,0xF9,
	0x15,0x7E,0x4E,0xE3,0xC7,0xD3,0x32,0x05,0x1C,0x24,0xBC,0x24,0x34,0x80,0x8C,0x05,
	0xC9,0x97,0x78,0x02,0x43,0xC6,0x90,0xA6,0x3D,0xC5,0x45,0xB5,0xB8,0x8E,0xBE,0x34,
	0x5A,0xAE,0xC4,0x97,0x97,0xF4,0xE0,0xA4,0x94,0xFF,0x68,0x3E,0x18,0xAD,0xB2,0x4B,
	0xFC,0x15,0xB6,0xC5,0xCA,0x7E,0xB5,0xE1,0x8C,0x82,0xC4,0x92,0x03,0xF4,0x50,0xAF,
	0xB5,0x56,0xF2,0x01,0x91,0xB4,0x2A,0xFD,0x27,0xC6,0xE3,0xBF,0x9C,0x32,0xC5,0x24,
	0xE0,0xE9,0xC0,0xC8,0xDA,0x96,0x5C,0xDD,0x79,0xB0,0xAF,0x49,0xF8,0x17,0x00,0xA1,
	0xAF,0x47,0x8E,0xE0,0x46,0x29,0xEF,0x45,0x2E,0x8B,0xF5,0xF5,0xA2,0x2C,0x35,0x28,
	0xA3,0x44,0x6D,0x2D,0xA8,0x93,0x86,0x7F,0x01,0x49,0xEB,0x27,0x18,0x9C,0x5B,0xBD,
	0x13,0xBF,0x91,0x14,0x8A,0x13,0x4D,0x0F,0x45,0x1B,0xA6,0xCB,0x4D,0xCE,0xB0,0x61,
	0xAD,0x9C,0xD3,0x6F,0xA6,0xBD,0x71,0x7E,0x5E,0x57,0xA1,0xD1,0x28,0xD1,0x32,0x24,
	0xEF,0x17,0x31,0x11,0x6F,0x0F,0xA4,0x31,0x46,0xAC,0x3B,0x3A,0x02,0x92,0x25,0x41,
	0xAB,0x5D,0x4A,0xD6,0x87,0x50,0x9B,0x50,0x0A,0xA8,0x37,0xB1,0x29,0xE7,0x92,0x51,
	0x8A,0x7A,0xE5,0x4B,0x48,0xC4,0x92,0xBD,0x4D,0x8D,0x3C,0xB9,0x61,0x69,0xC3,0x8A,
	0x87,0x98,0x69,0xE1,0x3E,0xAB,0xC5,0x1C,0xC2,0x78,0x55,0x67,0x60,0x1D,0xCB,0x0D,
	0x71,0x8C,0x64,0xAC,0xAA,0x14,0xF6,0xEB,0xB4,0xD6,0x70,0xAE,0x4F,0xED,0xFA,0x46,
	0x6C,0xB3,0x06,0xBC,0xFF,0x7F,0xEC,0xA9,0x81,0x28,0xE1,0x3A,0x4E,0xF2,0x6B,0x5D,
	0x6F,0x20,0xA5,0xFC,0x66,0x4E,0xF1,0x0D,0x18,0x1A,0xDE,0xDD,0xEF,0x8D,0x78,0xB2,
	0xC6,0x19,0x39,0xAB,0x3C,0x04,0x51,0x4F,0x7F,0xE7,0x03,0x89,0xB8,0x53,0x42,0x71,
	0x8F,0xE6,0xE0,0x58,0x90,0x5A,0xE0,0x7C,0x51,0x12,0xCD,0xD9,0xA2,0xC2,0x2D,0x2E,
	0x3E,0xEC,0x59,0x7E,0xA8,0x20,0x71,0xE4,0x3A,0x67,0x21,0x35,0x9E,0xCE,0x5F,0x96,
	0x1C,0x1C,0x8A,0x9F,0x7A,0xED,0x62,0x8A,0x7C,0x53,0xC4,0x72,0x0E,0x3A,0x46,0x2F,
	0xC2,0xB0,0xFC,0xFE,0x36,0xA1,0x0D,0xB1,0x6C,0x8A,0xE2,0x18,0x47,0xBF,0x11,0x26,
	0xA1,0x3B,0x5C,0xE1,0xB9,0xB6,0x57,0x70,0xF3,0xFA,0x8A,0x27,0x14,0x0A,0x34,0x2F,
	0x7B,0x02,0xFA,0x60,0x19,0x65,0x23,0x5D,0x11,0x15,0x2E,0x74,0x33,0x81,0xE6,0x75,
	0xE8,0xAC,0x4C,0xD1,0x1E,0x91,0xDD,0x40,0x53,0x5F,0x25,0x95,0xD7,0xDF,0xA4,0x9B,
	0xD4,0x41,0x6A,0xB2,0xC5,0x8E,0xF2,0xE0,0x62,0x5C,0x2B,0x5D,0x26,0x9F,0xAE,0xC7,
	0xFD,0x74,0x91,0x34,0xBD,0xB2,0x53,0xD6,0x75,0xC0,0xDD,0xE6,0xBB,0x2F,0x88,0xC6,
	0x78,0x44,0xA2,0x4B,0xEB,0xB3,0xF9,0x74,0xA6,0xCB,0x3E,0x1C,0xAE,0x60,0x4F,0x38,
	0x00,0x68,0xB7,0xB1,0x6F,0x94,0xCB,0xCD,0xB6,0xFC,0x74,0xE2,0xB8,0xDB,0xF5,0x50,
	0xFC,0x95,0xDB,0x3E,0xBA,0x69,0xB5,0x67,0x11,0x6F,0xA4,0xA3,0x3D,0xD4,0xE6,0x1D,
	0xE5,0x1D,0xE6,0x83,0xDD,0xB5,0x7C,0x00,0xED,0xCA,0x5E,0x70,0x80,0x82,0xF2,0x33,
	0x44,0x51,0xFF,0x27,0x1C,0x0A,0xF7,0xF1,0x04,0x63,0xC1,0xBD,0xA9,0x65,0x59,0x1A,
	0xE4,0x0D,0xA3,0x9F,0x61,0x4A,0x32,0xC3,0x13,0x3C,0x03,0x8B,0x40,0xFF,0x53,0xF4,
	0x55,0x0D,0x20,0xBA,0xBA,0x70,0xEF,0xF9,0x5D,0x24,0xED,0xD6,0xB7,0x1E,0x8A,0xFA,
	0x6B,0x44,0x1A,0x7F,0xD5,0xE0,0x22,0xBC,0x27,0xDB,0x5E,0x65,0xDF,0xBC,0x9D,0xC4,
	0xBD,0x52,0x07,0x5C,0x89,0x4B,0x73,0x41,0x3B,0x48,0xC6,0xD4,0x6F,0x67,0x9D,0x62,
	0x29,0x02,0xB5,0xA1,0x4E,0x22,0xBE,0x14,0x68,0xC3,0xAA,0x03,0x83,0x3C,0x91,0x46,
	0x4D,0xD6,0xC1,0x51,0xC2,0x9A,0x94,0x25,0xFE,0x6B,0x24,0xC6,0x18,0x76,0xF4,0xFD,
	0x0D,0xAC,0x1F,0x3C,0x24,0x42,0xB9,0xA9,0x55,0x90,0x62,0xEB,0x93,0x85,0x34,0xBB,
	0x12,0x69,0x97,0x6C,0xDB,0x20,0xA6,0xCE,0x45,0x25,0x25,0x93,0x39,0xBF,0x33,0xAF,
	0x47,0xBB,0x43,0xE8,0xEE,0x6D,0x07,0x3B,0xAD,0x4D,0x42,0xD3,0xB6,0x95,0xC7,0x32,
	0x5C,0xE8,0x14,0xBB,0x8B,0xD2,0x3C,0x60,0xEE,0xF1,0x22,0xAD,0x99,0x65,0x3C,0xC0,
	0x45,0xAD,0x4D,0x55,0x82,0x3D,0xDA,0x9B,0x6F,0x67,0x43,0x53,0xD4,0xD0,0xCF,0xBC,
	0xBA,0x2D,0x05,0x39,0xC9,0x46,0x28,0x29,0x18,0x28,0xB6,0xBE,0x3F,0xAA,0x32,0x12,
	0xB7,0xF3,0xA7,0xF7,0xF8,0x22,0xA4,0xE2,0xD9,0x99,0xA2,0x94,0x14,0x71,0x0D,0x98,
	0xFB,0xFE,0x74,0x7F,0xCC,0x26,0x7E,0xD3,0x24,0xE6,0xBE,0x5B,0x71,0x5C,0x79,0x4D,
	0x8A,0xE4,0xFD,0xB8,0xA6,0xDA,0x1A,0x99,0x6C,0xE1,0xD8,0x01,0xDB,0xF6,0x85,0x62,
	0x2D,0xFE,0xAB,0x74,0x0B,0x9E,0x91,0x94,0xAE,0x02,0x52,0xB1,0xB8,0x49,0xB4,0x11,
	0xEF,0xA9,0x39,0xA8,0x24,0xDB,0x2F,0xEC,0xE6,0x6A,0xA2,0xF6,0xD2,0x98,0x7B,0x49,
	0xA0,0x99,0x36,0xFC,0x3E,0xCA,0xF4,0x5C,0x97,0xFC,0xD0,0x35,0xD9,0xAD,0xC5,0x25,
	0x54,0x32,0x86,0xA9,0x49,0xC5,0x14,0xDC,0x46,0x83,0xFA,0x6F,0xE0,0xB3,0x70,0x39,
	0xE3,0xFB,0xE0,0xA6,0x5B,0x2B,0x79,0x08,0xFE,0xEA,0xD1,0x58,0xDD,0xA2,0xCF,0xA7,
	0x68,0x20,0x50,0x26,0x2B,0xD4,0x3E,0x6C,0xCB,0x87,0x1A,0xBC,0x2B,0x3B,0x28,0x0E,
	0xC4,0xFB,0xB4,0x62,0x98,0x13,0x34,0x8E,0x41,0x6D,0x30,0x33,0x09,0x91,0x36,0x3D,
	0x1B,0xBB,0x40,0xBD,0x22,0x4D,0x5F,0xD3,0xF4,0xD5,0x7F,0x2A,0x1A,0x28,0xA6,0xC2,
	0x54,0x0C,0xFD,0x2A,0x6E,0x17,0x77,0x30,0x00,0x9B,0x09,0x37,0xE5,0x9E,0x9C,0x42,
	0x9B,0xDD,0x44,0xF2,0xC5,0xEF,0x6A,0xAB,0x81,0xBB,0xE3,0xBB,0x55,0xEA,0x2D,0xA1,
	0xE0,0x2C,0x45,0xB8,0x94,0x7D,0xD6,0xAC,0x19,0xF4,0xB7,0xDF,0x38,0x21,0xE5,0xFB,
	0x57,0xE7,0x84,0xDE,0xEA,0x65,0x92,0x21,0x6F,0x66,0x41,0xD2,0xC2,0xD7,0x40,0x73,
	0xF8,0xD8,0x58,0x30,0xFF,0xAE,0x24,0x6C,0x7F,0x77,0xEF,0x99,0xB7,0x65,0x9E,0x99,
	0x6E,0x01,0x8B,0xA2,0x3A,0x41,0x42,0x4A,0xC3,0x3F,0xA8,0xB8,0xC6,0x89,0xA9,0x7F,
	0xEA,0xEB,0xCD,0x95,0x30,0x23,0xF1,0xC1,0x21,0xD7,0xA7,0xDB,0x08,0xAF,0xDB,0x56,
	0xD9,0xB3,0xD4,0x72,0x95,0x96,0xB3,0x63,0x4D,0x6F,0xF0,0xBA,0x0F,0x2B,0x87,0x7E,
	0x62,0xB7,0xDE,0x97,0x1D,0x18,0x86,0xDA,0xBF,0x88,0x59,0xA8,0x90,0xA4,0xB6,0x7B,
	0x2E,0xE1,0xBC,0x31,0x5E,0x7D,0xDB,0x1D,0x33,0xF2,0x10,0x8D,0xE3,0x06,0xA4,0xBA,
	0xEB,0x6F,0x54,0x21,0x54,0x70,0x19,0xDB,0x28,0xD8,0x12,0x37,0x84,0x05,0x43,0x20,
	0xCB,0xCD,0x1F,0x31,0xDC,0x7A,0x1B,0xAF,0x63,0xE4,0xB3,0xF6,0x96,0x2F,0xB5,0x6B,
	0x05,0x78,0xAB,0x9A,0x3B,0xA2,0xAE,0x2F,0x6B,0x6D,0x1B,0x8C,0x5D,0x93,0xD4,0x67,
	0x50,0xF6,0x18,0xDC,0x96,0x92,0x16,0xC5,0x0C,0xB6,0xC5,0x64,0xC2,0xF1,0xAC,0xEC,
	0x6D,0xE2,0x9C,0xDD,0x79,0x5A,0x88,0x53,0xD6,0x3C,0x00,0x29,0xD1,0x81,0xFE,0xB0,
	0x9C,0xFF,0x01,0x67,0x53,0xB6,0xB0,0xB4,0x9E,0x1B,0x70,0x99,0x3C,0x44,0xBD,0xEB,
	0x23,0x62,0x24,0xE5,0xF6,0xEB,0x2A,0x01,0xFA,0x76,0x8C,0xBC,0xD7,0xE6,0x92,0xC5,
	0xCD,0xA6,0x76,0x7F,0x1A,0x36,0x0B,0xAA,0xC6,0xFD,0x1F,0x5C,0x1C,0x38,0x59,0x9A,
	0x67,0x3A,0x7D,0x7D,0xD9,0xBF,0x57,0x62,0xA4,0x78,0xC9,0xD2,0xA6,0x2A,0xA4,0x0A,
	0x42,0xB1,0x51,0xFC,0x31,0x30,0x8B,0xD8,0x75,0x69,0x7E,0x29,0xB8,0x68,0x35,0xDD,
	0xB6,0x2E,0x22,0xF4,0x87,0xC5,0x12,0x40,0xE3,0xBA,0x04,0x85,0xB6,0x77,0x86,0xB0,
	0x9C,0xDC,0xAE,0x8D,0x21,0x01,0xD2,0xAA,0xDA,0x7F,0x77,0xE3,0xA8,0x6B,0x43,0x7C,
	0xD1,0x72,0xCD,0xC7,0xA9,0xE2,0x9E,0x32,0x08,0xC3,0xC6,0x29,0xBC,0x2A,0xCC,0xE2,
	0xB7,0xCE,0xE8,0x6C,0xAF,0xB3,0xC3,0xF2,0x62,0x66,0x35,0x81,0xC3,0x40,0xB6,0x52,
	0xB5,0x9A,0x7B,0x58,0x26,0x63,0x7E,0xD1,0xA0,0x12,0xDC,0x04,0xB1,0x42,0x49,0xF8,
	0xB4,0x05,0x99,0x0C,0xE4,0x70,0x82,0x19,0xBE,0x36,0x24,0xBF,0x1F,0xC2,0x01,0x7F,
	0xA2,0x8A,0x66,0x97,0x24,0x69,0x75,0xE3,0x7B,0x17,0x4F,0xF7,0xCB,0xD0,0x10,0xA3,
	0xF2,0xC7,0x9D,0xC8,0x05,0xF0,0x72,0x4F,0xDC,0xEE,0xEE,0xCE,0x14,0x14,0xD8,0x92,
	0x18,0x67,0x09,0xB7,0x0A,0x5D,0x86,0x8E,0xA8,0x1B,0x6A,0x2F,0x81,0x68,0x73,0x20,
	0x0F,0x14,0x0E,0x96,0x9A,0xE6,0x35,0xBC,0xEB,0x60,0x7F,0x07,0x39,0x15,0x2D,0xC3,
	0xD4,0x84,0x20,0xDB,0x7F,0x5D,0xF4,0x87,0x76,0x35,0xBA,0xD8,0x8A,0x8F,0x06,0x69,
	0xEA,0x90,0x48,0xB3,0x6A,0x78,0xAE,0xAE,0x5B,0x23,0x00,0x95,0x64,0xCE,0x33,0x18,
	0xD7,0x58,0xA4,0xC8,0x6B,0xAF,0x41,0x44,0x73,0x37,0x09,0xCC,0xDD,0x2D,0x9B,0x60,
	0xA4,0x7D,0xE5,0x57,0x7B,0xA7,0x01,0xCD,0xDA,0x80,0xDE,0x28,0xAD,0xE2,0x5D,0x9D,
	0x5E,0x68,0xD1,0x95,0xF5,0x2D,0x32,0x27,0x6F,0xA0,0x61,0x3F,0xB1,0xFD,0x47,0x06,
	0x99,0xA1,0xC1,0x64,0x16,0xC4,0x90,0x44,0x57,0x68,0xC4,0xA9,0x6A,0xFF,0x5E,0x91,
	0xEA,0x38,0x23,0x5A,0x83,0xBA,0xC9,0xB3};

	// 3 data arrays of 0x200 data each
	memcpy(sm_data1,&data[0],sizeof(sm_data1));
	memcpy(sm_data2,&data[sizeof(sm_data1)],sizeof(sm_data2));
	memcpy(sm_data3,&data[sizeof(sm_data1)+sizeof(sm_data2)],sizeof(sm_data3));
}

AresUtilityClass::AresUtilityClass(void)
{
}

AresUtilityClass::~AresUtilityClass(void)
{
}

//ORIGINAL BY Z
//MODIFIED BY T
void AresUtilityClass::DecryptFirstMessage(AresPacket &packet,unsigned int ip, unsigned short &m_state_short,byte &m_state_byte,unsigned short remote_port, bool b_0x38_message)
{
	if(!smb_inited_data){
		InitData();
	}

    unsigned short int code=CalculateIPCode(ip);

	if(b_0x38_message){
		code=remote_port;
	}

	const byte* buf=packet.GetEncryptedData()->GetBufferPtr();
	Buffer2000 *p_decrypted_data=new Buffer2000(packet.GetLength()+1);
	//unsigned char* buf=new unsigned char[packet.GetLength()];//=packet.GetEncryptedData();

	//memcpy(buf,packet.GetEncryptedData()->GetBufferPtr(),packet.GetLength());

	// Decrypt the first received message (op 0x33)
	for(unsigned int i=0;i<packet.GetLength();i++)
	{
		p_decrypted_data->WriteByte(buf[i]^(code>>8));
		//unsigned char c=buf[i];
		//buf[i]^=(code>>8);
		//TRACE("Output 0x%X\n",buf[i]);
		code+=buf[i];
		code*=0x5ca0;
		code+=0x15ec;		
	}

	// Extract the four-shit-short and four-shit-byte from the decrypted 0x33 message
	m_state_short=p_decrypted_data->GetByte(0x12)+(p_decrypted_data->GetByte(0x13)<<8);//buf[0x12] + (buf[0x13]<<8);
	m_state_byte=p_decrypted_data->GetByte(0x14);//buf[0x14];

	packet.SetDecryptedData(p_decrypted_data);

	//delete []buf;
	
	/*
    unsigned short int code=57;//CalculateIPCode(ip);

	Buffer2000 *p_encrypted_data=packet.GetEncryptedData();

	const byte* buf=p_encrypted_data->GetBufferPtr();
	int len=p_encrypted_data->GetLength();

	Buffer2000 *p_decrypted_data=new Buffer2000();
	
	// Decrypt the first received message (op 0x33)
	for(int i=0;i<len;i++)
	{
		unsigned char tmp=buf[i];
		tmp^=(code>>8);
		byte write_val=buf[i]^(code>>8);
		TRACE("Writing value %u, buf[%d]=0x%X, code>>8=%u\n",(UINT)write_val,i,(UINT)buf[i],code>>8);
		p_decrypted_data->WriteByte(tmp);

		code+=buf[i];
		code*=0x5ca0;
		code+=0x15ec;		
	}

	// Extract the four-shit-short and four-shit-byte from the decrypted 0x33 message
	m_state_short=p_decrypted_data->GetByte(0x12)+(p_decrypted_data->GetByte(0x13)<<8);//buf[0x12] + (buf[0x13]<<8);
	m_state_byte=p_decrypted_data->GetByte(0x14);//buf[0x14];
	TRACE("AresUtilityClass::DecryptFirstMessage() State Short=%u, State Byte=%u\n",m_state_short,m_state_byte);

	packet.SetDecryptedData(p_decrypted_data);*/
}

//ORIGINAL BY Z
unsigned short int AresUtilityClass::CalculateIPCode(unsigned int ip)
{
	
	unsigned short int code=0;

	ip=htonl(ip);	// endian swap

	// Increment is the first ip value.
	unsigned int inc=ip & 0xFF;

	unsigned int bounded=Bound(ip);

	unsigned int mult=0x4f1bbcdc;	// constant multiplier

	// 1,2,3
	unsigned int quot=bounded*mult;
	quot>>=16;
	code=(quot*3)+((inc*inc)*3);
	
	// 4
	quot=0x04be0000+code;
	bounded=Bound(quot);	// bound it
	quot=bounded*mult;		// and multiply it
	quot>>=16;
	code+=quot;				// add it to the running sum

	// 5
	bounded=Bound(ip);	// bound the IP again
	quot=bounded*mult;	// and mult it
	quot>>=16;			// and shift it down
	code+=quot;			// and add it

	// 6
	code+=0x12;		// add 12h
	code+=0x5907;	// add bounded and multiplied 'strano' value

	// 7
	inc-=5;
	inc<<=2;
	inc*=3;
	code-=inc;
	code+=0xcdf8;	// add bounded and multiplied 'robboso' value

	// 8
	if(code < 0x400)
	{
		code+=0x800;
	}
	if(code == 0x8db6)
	{
		code++;
	}

	return code;
}

//ORIGINAL BY Z
unsigned int AresUtilityClass::Bound(unsigned int val)
{
	
	unsigned int bounded=val;
	if(((bounded & 0x000000FF) >= 0x00000041) && ((bounded & 0x000000FF) <= 0x0000005a))
	{
		bounded += 0x00000020;
	}
	if(((bounded & 0x0000FF00) >= 0x00004100) && ((bounded & 0x0000FF00) <= 0x00005a00))
	{
		bounded += 0x00002000;
	}
	if(((bounded & 0x00FF0000) >= 0x00410000) && ((bounded & 0x00FF0000) <= 0x005a0000))
	{
		bounded += 0x00200000;
	}
	if(((bounded & 0xFF000000) >= 0x41000000) && ((bounded & 0xFF000000) <= 0x5a000000))
	{
		bounded += 0x20000000;
	}
	return bounded;
}

//void AresUtilityClass::ThirtyThreeSixteenToZeroTwenty(unsigned char *sixteen_in,unsigned char *twenty_out)
//ORIGINAL BY Z
//MODIFIED BY T
void AresUtilityClass::CalculateRemoteGUIDSha1(byte* remote_guid, byte* sha1,unsigned short state_short,byte state_byte)
{
	
	unsigned char sixteen[16];
	memcpy(sixteen, remote_guid,16);

	// Step 1
	sixteen[0]=((sixteen[1] ^ sixteen[11]) + 0x431f) & 0xFF;

	// Step 2
	Loop123(sixteen,const_5919a8,16);

	// Step 3
	unsigned char thirtytwo[32];
	memcpy(thirtytwo,sixteen,16);
	memcpy(&thirtytwo[16],sixteen,16);

	// Step 4
	Loop123(thirtytwo,const_591aa8,32);

	// Step 5
	Loop123(thirtytwo,const_591ba8,32);

	// Step 6
	unsigned char *edi=const_591ca8;
	edi++;
	unsigned char *eax=const_591da8;
	eax+=2;

	// Step 7
	Loop4(thirtytwo,edi,eax);

	// Step 8
	unsigned char fivetwelve[512];	// 0x200
	for(int i=0;i<16;i++)
	{
		memcpy(&fivetwelve[i*32],thirtytwo,32);
	}

	// fivetwelve cointains the 0x200 (512) 0x33 bytes

	// The 0x33 0x14 is the alternate sha-1 of the 0x33 0x200
	unsigned char altsha1[20];
	//unsigned char altsha1_tmp[20];
	//CryptoPP::altSHA1 altsha;
	//altsha.CalculateDigest(altsha1,fivetwelve,sizeof(fivetwelve));

	//TRACE("BEGIN SHA TEST\n");
	//TRACE("CRYPTO ALTSHA: ");
	//PrintByteArray(altsha1,20);
	
	AresSHA1 ty_alt_sha;
	ty_alt_sha.Update(fivetwelve,sizeof(fivetwelve));
	ty_alt_sha.Final();
	ty_alt_sha.GetHash(altsha1);
	//TRACE("TY ALTSHA: ");
	//PrintByteArray(altsha1_tmp,20);
	//TRACE("CRYPTO ALTSHA: ");
	//PrintByteArray(altsha1,20);

	//AresSHA1 ares_sha_machine;
	//ares_sha_machine.Update(fivetwelve,sizeof(fivetwelve));
	//ares_sha_machine.Final();
	//ares_sha_machine.GetHash(altsha1);  //fill in return buffer


	// Get the 2 bytes to go on the end of the 0x00 20, finishing up the 0x00 22
	unsigned short int two=CalculateTwoBytesFromBuffer(altsha1,sizeof(altsha1));

	// Get offset short for the piss algorithm
	unsigned short int offset_short;
	memcpy(&offset_short,&const_591da8[state_byte*2],2);

	unsigned short int piss=FourPissAlgorithm(state_short,state_byte,offset_short);
	piss++;

	// Create the 0x18 buffer from the piss++ short, the short from the altsha, and the altsha itself
	unsigned char eighteen[0x18];
	memcpy(eighteen,&piss,sizeof(unsigned short));
	memcpy(&eighteen[2],&two,sizeof(unsigned short));
	memcpy(&eighteen[4],altsha1,sizeof(altsha1));

	// Overwrite the first byte of the 0x18 with 0xff
	eighteen[0]=0xff;

	// Fill a 0x300 buffer with the 0x18
	unsigned char threehundred[0x300];
	for(i=0;i<32;i++)
	{
		memcpy(&threehundred[i*sizeof(eighteen)],eighteen,sizeof(eighteen));
	}

	// Take sha of the 0x300
	//SHA1 normal_sha_machine;
	//normal_sha_machine.Update(threehundred,sizeof(threehundred));
	//normal_sha_machine.Final();
	//normal_sha_machine.GetHash(sha1);  //fill in return buffer
	
	//unsigned char sha1_tmp[20];
	//CryptoPP::SHA1 sha;
	//sha.CalculateDigest(sha1,threehundred,sizeof(threehundred));

	//TRACE("CRYPTO SHA1: ");
	//PrintByteArray(sha1,20);

	SHA1 ty_sha;
	ty_sha.Update(threehundred,sizeof(threehundred));
	ty_sha.Final();
	ty_sha.GetHash(sha1);
	//TRACE("TY SHA1: ");
	//PrintByteArray(sha1_tmp,20);

	//TRACE("CRYPTO SHA1: ");
	//PrintByteArray(sha1,20);

	//TRACE("END SHA TEST\n");
	


	// sha1 is the 0x00 20
	//memcpy(twenty_out,sha1,20);	

	/*
	unsigned char sixteen[16];
	memcpy(sixteen,remote_guid,16);

	// Step 1
	sixteen[0]=((sixteen[1] ^ sixteen[11]) + 0x431f) & 0xFF;

	// Step 2
	Loop123(sixteen,const_5919a8,16);

	// Step 3
	unsigned char thirtytwo[32];
	memcpy(thirtytwo,sixteen,16);
	memcpy(&thirtytwo[16],sixteen,16);

	// Step 4
	Loop123(thirtytwo,const_591aa8,32);

	// Step 5
	Loop123(thirtytwo,const_591ba8,32);

	// Step 6
	unsigned char *edi=const_591ca8;
	edi++;
	unsigned char *eax=const_591da8;
	eax+=2;

	// Step 7
	Loop4(thirtytwo,edi,eax);

	// Step 8
	unsigned char fivetwelve[512];	// 0x200
	for(int i=0;i<16;i++)
	{
		memcpy(&fivetwelve[i*32],thirtytwo,32);
	}

	// fivetwelve cointains the 0x200 (512) 0x33 bytes

	// The 0x33 0x14 is the alternate sha-1 of the 0x33 0x200
	unsigned char altsha1[20];
	SHA1 ares_sha_machine;
	ares_sha_machine.Update(fivetwelve,sizeof(fivetwelve));
	ares_sha_machine.Final();
	ares_sha_machine.GetHash(altsha1);  //fill in return buffer


	// Get the 2 bytes to go on the end of the 0x00 20, finishing up the 0x00 22
	unsigned short int two=CalculateTwoBytesFromBuffer(altsha1,sizeof(altsha1));

	// Get offset short for the piss algorithm
	unsigned short int offset_short;
	memcpy(&offset_short,&const_591da8[state_byte*2],2);

	unsigned short int piss=FourPissAlgorithm(state_short,state_byte,offset_short);
	piss++;

	// Create the 0x18 buffer from the piss++ short, the short from the altsha, and the altsha itself
	unsigned char eighteen[0x18];
	memcpy(eighteen,&piss,sizeof(unsigned short));
	memcpy(&eighteen[2],&two,sizeof(unsigned short));
	memcpy(&eighteen[4],altsha1,sizeof(altsha1));

	// Overwrite the first byte of the 0x18 with 0xff
	eighteen[0]=0xff;

	// Fill a 0x300 buffer with the 0x18
	unsigned char threehundred[0x300];
	for(i=0;i<32;i++)
	{
		memcpy(&threehundred[i*sizeof(eighteen)],eighteen,sizeof(eighteen));
	}
	
	// Take sha of the 0x300
	SHA1 normal_sha_machine;
	normal_sha_machine.Update(threehundred,sizeof(threehundred));
	normal_sha_machine.Final();
	normal_sha_machine.GetHash(sha1);  //fill in return buffer
	
	*/	
}

//ORIGINAL BY Z
void AresUtilityClass::Loop123(unsigned char *data, unsigned char *const_data, unsigned int len)
{
	for(unsigned int i=0;i<len;i++)
	{
		data[i]=data[i] ^ const_data[len-i-1];
	}
}

//ORIGINAL BY Z
void AresUtilityClass::Loop4(unsigned char *data,unsigned char *edi,unsigned char *ecx)
{
	for(int i=0;i<32;i++)
	{
		data[i]=data[i] ^ ((*edi)+(*ecx));
		edi++;
		ecx+=2;
	}
}

//ORIGINAL BY Z
unsigned short int AresUtilityClass::CalculateTwoBytesFromBuffer(unsigned char *buf,unsigned int len)
{
	// Calculate the pad needed to make the length of multiple of 4 for the dword xor-ing
	unsigned int pad=0;
	while((len+pad) % 4 != 0)
	{
		pad++;
	}
		
	// Make a lower-cased copy of the buffer (pad it out to make sure it is a dword multiple)
	unsigned char *lower=new unsigned char[len+pad];
	memset(lower,0,len+pad);
	memcpy(lower,buf,len);

	// Lower-case the buffer
	for(int i=0;i<(int)len;i++)
	{
		if((lower[i]>='A') && (lower[i]<='Z'))
		{
			lower[i]+='a'-'A';
		}
	}

	unsigned short int two;

	unsigned int *dwords=(unsigned int *)lower;
	unsigned int num_dwords=(len+pad)/4;
	unsigned int xors=0;

	for(i=0;i<(int)num_dwords;i++)
	{
		xors ^= dwords[i];
	}

	xors *= 0x4f1bbcdc;

	two = xors >> 16;

	delete [] lower;

	return two;
}

//ORIGINAL BY Z
unsigned short int AresUtilityClass::FourPissAlgorithm(unsigned short int four_shit_short,unsigned char four_shit_byte,unsigned short int the_short)
{
	unsigned int out=the_short;

	unsigned int val_1=*((unsigned short int *)&sm_data2[four_shit_byte*2]);
	unsigned int val_2=*((unsigned short int *)&sm_data3[four_shit_byte*2]);
	unsigned int val_3=val_1-val_2;

	for(int i=0;i<4;i++)
	{
		out -= four_shit_byte*3;
		out += val_3;
		out += four_shit_short;
	}

	return out & 0x0000FFFF;
}

unsigned char AresUtilityClass::CalcStateByte(unsigned char input,unsigned int &state)
{
	state*=0x08088405;
	state++;
	
	DWORD64 quot=(DWORD64)state * (DWORD64)input;

	return (unsigned char)(quot>>32);
}

unsigned short int AresUtilityClass::CalcStateShort(unsigned short int input,unsigned int &state)
{
	state*=0x08088405;
	state++;
	
	DWORD64 quot=(DWORD64)state * (DWORD64)input;

	return (unsigned short int)(quot>>32);
}

void AresUtilityClass::EncryptMessage(unsigned char *buf,unsigned int len,unsigned short int pes)
{
	unsigned short int code=pes;

	unsigned int i;
	for(i=0;i<len;i++)
	{
		unsigned char c=buf[i];
		buf[i]^=(code>>8);

		code+=buf[i];
		code*=0xce6d;
		code+=0x58bf;
	}
}
unsigned short int AresUtilityClass::GetEncryptionShort(byte state_byte)
{
	return *((unsigned short int *)&const_591da8[state_byte*2]);
//	ASSERT(0);
//	return 0;
}

void AresUtilityClass::DecryptMessage(AresPacket &packet,unsigned short &m_fss,byte &m_fsb)
{
	const byte *buf=packet.GetEncryptedData()->GetBufferPtr();

	unsigned int first_byte=buf[0];	// first data byte
	unsigned int code=FourShitAlgorithm(first_byte,m_fss,m_fsb);

	Buffer2000 *p_decrypted_data=new Buffer2000(packet.GetLength()+1);

	p_decrypted_data->WriteByte(buf[0]);
	p_decrypted_data->WriteByte(buf[1]);
	// Skip two bytes and start decrypting
	unsigned int len=packet.GetLength();
	for(unsigned int i=2;i<len;i++)
	{	
		//unsigned char c=buf[i];
		p_decrypted_data->WriteByte(buf[i]^(code>>8));
		//buf[i]^=(code>>8);

		code+=buf[i];//c
		code*=0xce6d;
		code+=0x58bf;
	}	
	packet.SetDecryptedData(p_decrypted_data);
}

unsigned short int AresUtilityClass::FourShitAlgorithm(unsigned char first_byte,unsigned short &m_fss,byte &m_fsb)
{
	unsigned int out=sm_data1[m_fsb*2]+(sm_data1[m_fsb*2+1]<<8);

	unsigned int val_1=sm_data2[first_byte*2]+(sm_data2[first_byte*2+1]<<8);
	unsigned int val_2=sm_data3[first_byte*2]+(sm_data3[first_byte*2+1]<<8);
	unsigned int val_3=val_1-val_2;

	for(int i=0;i<4;i++)
	{
		out -= first_byte*3;
		out += val_3;
		out += m_fss;
	}

	return out & 0x0000FFFF;
}


void AresUtilityClass::PrintByteArray(byte* data, unsigned int len)
{
	for(int i=0;i<(int)len;i++){
		TRACE("%X",data[i]);
	}

	TRACE("\n");
}

//
//
//
unsigned short int AresUtilityClass::DecryptFTPacket(unsigned char *buf,unsigned int len,unsigned short int decrypt_code)
{
	unsigned short int code=decrypt_code;
	for(unsigned int i=0;i<len;i++)
	{
		unsigned char c=buf[i];
		buf[i]^=(code>>8);
		
		code+=c;
		code*=0xcb6f;
		code+=0x41ba;
	}
	return code;
}

//
//
//
unsigned short int AresUtilityClass::EncryptFTPacket(unsigned char *buf,unsigned int len,unsigned short int encrypt_code)
{
	unsigned short int code=encrypt_code;
	for(unsigned int i=0;i<len;i++)
	{
		unsigned char c=buf[i];
		buf[i]^=(code>>8);

		code+=buf[i];
		code*=0xcb6f;
		code+=0x41ba;
	}
	return code;
}

unsigned short AresUtilityClass::GetConst591da8(int offset){
	return *((unsigned short int *)&const_591da8[offset]);
}

CString AresUtilityClass::EncodeBase16(const unsigned char* buffer, unsigned int bufLen)
{
	CString base16_buff;
	static byte base16_alphabet[] = "0123456789ABCDEF";

	for(unsigned int i = 0; i < bufLen; i++) {
		base16_buff += base16_alphabet[buffer[i] >> 4];
		base16_buff += base16_alphabet[buffer[i] & 0xf];
	}

	return base16_buff;
}

void AresUtilityClass::EncryptFirstMessage(unsigned short& state_short, byte& state_byte, unsigned short my_port,AresPacket &packet)
{
	/*
	if(!smb_inited_data){
		InitData();
	}

	

	Buffer2000 p_encrypted_data=new Buffer2000(packet.GetLength()+1);

	unsigned short int code=my_port;

	const byte* buf=packet.GetDecryptedData()->GetBufferPtr();
	for(int i=0;i<packet.GetLength();i++){
		p_encrypted_data.WriteByte(*(packet.GetDecryptedData()->GetMutableBufferPtr()+i));
	}

	p_encrypted_data.WriteByte(

	//Buffer2000 *p_decrypted_data=new Buffer2000(packet.GetLength()+1);
	//unsigned char* buf=new unsigned char[packet.GetLength()];//=packet.GetEncryptedData();

	//memcpy(buf,packet.GetEncryptedData()->GetBufferPtr(),packet.GetLength());

	// Decrypt the first received message (op 0x33)
	for(unsigned int i=0;i<packet.GetLength();i++)
	{
		p_decrypted_data->WriteByte(buf[i]^(code>>8));

		code+=buf[i];
		code*=0x5ca0;
		code+=0x15ec;		
	}

	// Extract the four-shit-short and four-shit-byte from the decrypted 0x33 message
	m_state_short=p_decrypted_data->GetByte(0x12)+(p_decrypted_data->GetByte(0x13)<<8);//buf[0x12] + (buf[0x13]<<8);
	m_state_byte=p_decrypted_data->GetByte(0x14);//buf[0x14];

	packet.SetDecryptedData(p_decrypted_data);
	*/
}

bool AresUtilityClass::IsHashFakeByByte(byte* hash)
{
	for(int i=0;i<9;i++){
		if(hash[i]==0xff && hash[i+1]==0xff)
			return true;
	}

	for(int i=10;i<19;i++){
		if(hash[i]==0x00 && hash[i+1]==0x00)
			return true;
	}

	return false;
}

bool AresUtilityClass::IsHashFakeByString(const char* hash)
{
	for(int i=0;i<16;i++){
		if(hash[i]=='f' && hash[i+1]=='f' && hash[i+2]=='f' && hash[i+3]=='f')
			return true;
	}

	for(int i=20;i<36;i++){
		if(hash[i]=='0' && hash[i+1]=='0' && hash[i+2]=='0' && hash[i+3]=='0')
			return true;
	}
	return false;
}
